/* global PIXI, Polymer */

// Shader rendering.

const toCamelCase = (str, noFirstCap, firstWordCap) => {
  str = str.split(/[-_ ]/g);
  
  if(firstWordCap) {
    str[0] = str[0].toUpperCase();
  }
  
  return str.map(
    (str, dex) =>
      !noFirstCap && dex === 0 || dex > 0
        ? str[0].toUpperCase()+str.substr(1)
        : str
  ).join(``);
};

class Shader {
  constructor(src, animated) {
    this.src = src;
    this.animated = animated;
    this.uniforms = Object.assign({}, Shader.standardUniforms);
    
    this.load();
  }
  
  // Creates filter from shader, loading custom shader code if necessary. 
  load() {
    return new Promise((success, failure) => {
      // Keyword shader.
      if(Shader.keywords.has(this.src)) {
        this.filter = new PIXI.filters[`${toCamelCase(this.src)}Filter`]();
        
        this.filter.uniforms = Object.assign(this.filter.uniforms, Shader.standardUniforms);

        Shader.registry.set(this.src);

        success(this);

        return;
      }
      
      // Custom shader.
      
      // Already loaded?
      if(Shader.registry.has(this.src)) {
        this.createFilter(Shader.registry.get(this.src));
        
        success(this);
        
        return;
      }
      
      // Load new custom shader.
      let loader = new PIXI.loaders.Loader();

      loader.add(`shader`, this.src);
      loader.once(`complete`, (self, resource) => {
        this.createFilter(resource.shader.data);

        Shader.registry.set(this.src, resource.shader.data);

        success(this);
      });
      loader.once(`error`, failure);
      loader.load();
    });
  }
  
  // Creates filter from custom shader.
  createFilter(shaderData) {
    this.filter = new PIXI.AbstractFilter(
      null,
      Shader.standardPrefix
      + shaderData
        .replace(/void mainImage\( out vec4 fragColor, in vec2 fragCoord \)/, `void main()`)
        .replace(/vUv/g, `vTextureCoord`)
        .replace(/fragCoord/g, `vec2(vTextureCoord.x, 1.0 - vTextureCoord.y)`)
        .replace(/fragColor =/g, `gl_FragColor =`)
        .replace(/fragColor/g, `vColor`)
        .replace(/tDiffuse/g, `uSampler`)
        .replace(/iChannel0/g, `uSampler`),
      this.uniforms
    );
  }
  
  // Associates shader with button and layer.
  // Returns filter to be applied alongside others in layer.
  attachTo(button, layer) {
    this.button = button;
    this.layer = layer;
    
    let filter = this.filter;

    filter.padding = this.effectPadding;
  
    filter.uniforms.iResolution.value[0] = button.width;
    filter.uniforms.iResolution.value[1] = button.height;
    filter.uniforms.iChannelResolution.value[0] = button.width;
    filter.uniforms.iChannelResolution.value[1] = button.height;
    
    return filter;
  }

  start() {
    if(this.animated) {
      let ticker = PIXI.ticker.shared;
  
      ticker.add(this.tick, this);
    }
  }
  
  tick(delta) {
    this.filter.uniforms.time && (this.filter.uniforms.time.value += delta/1000);
    this.filter.uniforms.iGlobalTime.value += delta/1000;
    this.filter.uniforms.iChannelTime.value[0] += delta/1000;
    
    let d = new Date();
    this.filter.uniforms.iDate.value = [
      d.getFullYear(),
      d.getMonth(),
      d.getDate(),
      d.getHours()*60.0*60 + d.getMinutes()*60 + d.getSeconds()  + d.getMilliseconds()/1000.0
    ];
    
    this.button.canvas.renderer.render(
      this.button.canvas.container
    );
  }
  
  point(event) {
    
  }
  
  stop() {
    if(this.animated) {
      let ticker = PIXI.ticker.shared;
  
      ticker.remove(this.tick, this);
    }
  }
}

Object.defineProperties(Shader, {
  standardPrefix: {
    value:
`
  precision lowp float;
  uniform sampler2D uSampler;
  uniform vec3 iResolution;
  uniform float iGlobalTime;
  uniform float iChannelTime[4];
  uniform vec3 iChannelResolution[4];
  uniform vec4 iMouse;
  uniform vec4 iDate;
  uniform float iSampleRate;
  varying vec2 vTextureCoord;
  varying vec4 vColor;
`
/*`
`*/
  },
  /*
    Shader Inputs
    uniform vec3      iResolution;           // viewport resolution (in pixels)
    uniform float     iGlobalTime;           // shader playback time (in seconds)
    uniform float     iChannelTime[4];       // channel playback time (in seconds)
    uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
    uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
    uniform samplerXX iChannel0..3;          // input channel. XX = 2D/Cube
    uniform vec4      iDate;                 // (year, month, day, time in seconds)
    uniform float     iSampleRate;           // sound sample rate (i.e., 44100)
  */
  standardUniforms: {
    value: {
      iResolution: { type: `3f`, value: [0.0, 0.0, 1.0] },
      iGlobalTime: { type: `1f`, value: 0.0 },
      iChannelTime: { type: `1fv`, value: [0.0, 0.0, 0.0, 0.0] },
      iChannelResolution: { type: `3fv`, value: [
        0.0, 0.0, 1.0,
        0.0, 0.0, 0.0,
        0.0, 0.0, 0.0,
        0.0, 0.0, 0.0
      ] },
      iMouse: { type: `4fv`, value: [0.0, 0.0, 0.0, 0.0] },
      iDate: { type: `4fv`, value: [0.0, 0.0, 0.0, 0.0] },
      iSampleRate: { type: `1f`, value: 44100 },

      center: { type: `v2`, value: { x: 0.5, y: 0.5 } },
      time: { type: `1f`, value: 0.0 },

      tDiffuse: { type: `t`, value: null },
      distortion:     { type: `1f`, value: 3.0 },
      distortion2:     { type: `1f`, value: 5.0 },
      speed:     { type: `1f`, value: 0.2 },
      rollSpeed:     { type: `1f`, value: 0.1 }
    }
  },
  registry: {
    value: new Map()
  },
  keywords: {
    value: new Set([
      `ascii`,
      `bloom`,
      `blur-dir`,
      `blur`,
      `blur-x`,
      `blur-y`,
      `color-matrix`,
      `color-step`,
      `convolution`,
      `cross-hatch`,
      `displacement`,
      `dot-screen`,
      `drop-shadow`,
      `gray`,
      `invert`,
      `noise`,
      `normal-map`,
      `pixelate`,
      `rgb-split`,
      `sepia`,
      `shockwave`,
      `smart-blur`,
      `tilt-shift-axis`,
      `tilt-shift`,
      `tilt-shift-x`,
      `tilt-shift-y`,
      `twist`
    ])
  }
});